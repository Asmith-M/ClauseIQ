from fastapi import APIRouter, HTTPException, Response, Depends
from sqlalchemy.orm import Session
from app.database import SessionLocal
from app.models import Document as DocumentModel, Clause as ClauseModel
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
from reportlab.pdfgen import canvas
from io import BytesIO

router = APIRouter()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def risk_color(risk):
    if not risk:
        return colors.grey
    risk = risk.lower()
    if risk == "high":
        return colors.red
    elif risk == "medium":
        return colors.orange
    elif risk == "low":
        return colors.green
    return colors.grey

def risk_badge(risk):
    if not risk:
        return "[Unknown]"
    risk = risk.capitalize()
    if risk == "High":
        return f"<font color='white' backcolor='red'>  {risk}  </font>"
    elif risk == "Medium":
        return f"<font color='white' backcolor='orange'>  {risk}  </font>"
    elif risk == "Low":
        return f"<font color='white' backcolor='green'>  {risk}  </font>"
    return risk

def add_header(canvas, doc):
    canvas.saveState()
    canvas.setFont('Helvetica-Bold', 16)
    canvas.setFillColor(colors.HexColor('#3b82f6'))
    canvas.drawString(40, 760, "ClauseIQ Legal Clause Report")
    canvas.setFont('Helvetica', 10)
    canvas.setFillColor(colors.black)
    canvas.drawString(40, 745, "Generated by ClauseIQ")
    canvas.restoreState()

@router.get("/documents/{doc_id}/report")
def generate_document_report(doc_id: int, db: Session = Depends(get_db)):
    doc = db.query(DocumentModel).filter(DocumentModel.id == doc_id).first()
    if not doc:
        raise HTTPException(status_code=404, detail="Document not found")
    buffer = BytesIO()
    pdf = SimpleDocTemplate(buffer, pagesize=letter, title=f"ClauseIQ Report - {doc.filename}")
    styles = getSampleStyleSheet()
    story = []
    story.append(Spacer(1, 24))
    for idx, clause in enumerate(doc.clauses, 1):
        # Highlight high risk
        border_color = risk_color(clause.risk)
        clause_style = ParagraphStyle(
            'ClauseText',
            parent=styles['Normal'],
            fontSize=11,
            leading=15,
            borderWidth=2 if clause.risk and clause.risk.lower() == 'high' else 0.5,
            borderColor=border_color,
            borderPadding=8,
            spaceAfter=8,
            backColor=colors.whitesmoke,
        )
        story.append(Paragraph(f"<b>Clause {idx}:</b> {clause.text}", clause_style))
        # Risk badge
        story.append(Paragraph(f"Risk: {risk_badge(clause.risk)}", styles['Normal']))
        # Category
        if clause.category:
            story.append(Paragraph(f"Category: <b>{clause.category}</b>", styles['Normal']))
        # Explanation
        if clause.explanation:
            story.append(Paragraph(f"<i>Explanation:</i> {clause.explanation}", styles['Normal']))
        # Reason
        if clause.reason:
            story.append(Paragraph(f"<i>Reason:</i> {clause.reason}", styles['Normal']))
        story.append(Spacer(1, 16))
        # Page break if needed
        if idx % 4 == 0:
            story.append(PageBreak())
    pdf.build(story, onFirstPage=add_header, onLaterPages=add_header)
    buffer.seek(0)
    return Response(buffer.read(), media_type="application/pdf", headers={
        "Content-Disposition": f"attachment; filename=ClauseIQ_Report_{doc_id}.pdf"
    })
